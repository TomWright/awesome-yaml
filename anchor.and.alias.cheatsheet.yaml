dataroot: &uutreeroot
  ## here is a simple table structure constructed
  ## with a list of dictionaries (aka hash aka object aka associative-array)
  character_table: &uutbcharacter
    - &character001
      fname:  homer
      lname:  simpson
      role:   daddy
      age:    33

    - &character003
      fname:  peter
      lname:  griffin
      role:   dad
      age:    38

    - &character005
      fname:  bart
      lname:  simpson
      role:   troublemaker
      age:    8

    - &character006
      fname:  stewie
      lname:  griffin
      role:   troublemaker
      age:    3

    - &character007
      fname:  meg
      lname:  griffin
      role:   victim_kid
      age:    14

    - &character008
      fname:  lisa
      lname:  simpson
      role:   smart_kid
      age:    12

    - &character009
      fname:  marge
      lname:  simpson
      role:   mom
      age:    32

  ## This pulls in an alias using the nonfolding method
  ## This causes the transported_name_value_pairs to be nested underneath the
  ## containing key of the local_name_value_pairs
  ## in this example, the `char` key becomes the parent container for a nested dictionary
  toublemaker_table: &uutbtroub
    - char:     *character005
      motto:    kowabunga
      ## here we have a duplicate `role` field, but it does not overwrite
      ## the transported_name_value_pair for `character_table.role` because
      ## that is nested under the `char:` key
      role:     comic_relief

    - char:     *character006
      motto:    Oh, how ruthlessly absurd.
      ## here we have a duplicate `role` field, but it does not overwrite
      ## the transported_name_value_pair for `character_table.role` because
      ## that is nested under the `char:` key
      role:     evil_genius

  dad_table: &uutbdad
    ## using the `<<:` fold method causes the transported_name_value_pairs
    ## to all be at the same depth-level as the local_name_value_pairs
    ## in this example, the `motto` and `role` keys simply get added on to the
    ## transported_name_value_pairs
    - <<:       *character003
      ## Here the `role` field of character003 gets changed from "dad" to "Father"
      role:     Father
      motto:    Aw, c'mon Lois, isn't 'bribe' just another word for 'love'?

    ## since the "role" name is duplicated, the transported_name_value_pair
    ## gets overwritten by the local_name_value_pair.
    ## This is true even if local_value is blank
    - <<:       *character001
      motto:    DOH
      ## Here the `role` field of character001 gets changed from "daddy" to empty_string
      role:     ""

  ## here a table is created with nothing more than anchors and row_folding
  woman_table: &uutbwoman
    - &ftrow_1x
      <<: *character007
    - &ftrow_2x
      <<: *character008
    - &ftrow_3x
      <<: *character009

  ## here a datarecord is created with addon fields from a record inside an
  ## aliased table. Notice here that the folded 'role' field gets clobbered
  ## by the local `role` field
  xx_favecharacter_info:
    type: animated
    sex:  female
    role: lead female
    <<:   *ftrow_3x

## href="smartpath://mytrybits/y/tryyaml/dynamicyaml/devlog.txt"
## href="smartpath://mymedia/2014/git/github/dynamic.yaml/py/ddyaml.py"
__yaml__:

  - &uuid001
    caption:      caption
    processthis:  1
    uuid:         uuid001
    template:         |
      {{ dataroot |jjdata_formatas('jsonpretty') }}


